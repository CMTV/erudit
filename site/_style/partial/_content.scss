@use 'sass:map';

@use 'def/size';
@use 'def/color';
@use 'def/ab';
@use 'def/bp';

@use 'partial/scroll';
@use 'partial/util';

%CONTENT
{
    font-size: 18px;
    line-height: 1.4;
    text-align: justify;

    * { scroll-margin-top: 25px; }

    > *:not(:last-child) { margin-bottom: size.$gapBig; }

    padding: size.$gapBig;

    @include bp.max(mini)
    {
        font-size: 99%;
        text-align: left;
        letter-spacing: .03em;

        padding: size.$gap;
    }

    //
    // Hr
    //

    hr 
    {
        border-bottom: 1px solid var(--c_border);
    }

    //
    // Heading
    //

    h1, h2, h3
    {
        text-align: left;
    }

    h2, h3
    {
        font-weight: 600;

        &:hover > .hAnchor { opacity: 1; }

        > .hAnchor
        {
            margin-left: size.$gapSmall;
            color: var(--c_text-dimmed);
            font-size: 70%;
            text-decoration: none;

            opacity: 0;
            @include util.transition(opacity, color);

            &:hover { color: var(--c_text-muted); }
        }
    }

    h2
    {
        font-size: 1.3em;
        padding-bottom: size.$gapSmall;
        border-bottom: 1px solid var(--c_border);
    }

    h3
    {
        font-size: 1.1em;
    }

    //
    // List
    //

    ul, ol
    {
        list-style-position: inside;

        li
        {
            display: flex;
            gap: size.$gapSmall;

            margin-bottom: size.$gapSmall;
            &:last-child { margin-bottom: 0; }
        }
    }

    ul li::before
    {
        font-family: Arial, Helvetica, sans-serif;
        content: "â€¢";
        color: var(--c_text-muted);
        font-size: 28px;
        line-height: 1;
    }

    ol
    {
        counter-reset: ol-counter;
        
        li
        {
            counter-increment: ol-counter;

            &::before
            {
                content: counter(ol-counter) ".";
                color: var(--c_text-muted);
                font-weight: 600;
            }
        }
    }

    //
    // Table
    //

    .tableWrapper
    {
        width: 100%;
        overflow-x: auto;
        @extend %scrollbar;
    }

    table
    {
        position: relative;
        border-collapse: collapse;
        margin-left: auto;
        margin-right: auto;
    }

    table, th, td
    {
        border: 1px solid var(--c_border);
    }

    th, td
    {
        padding: size.$gapSmall;
    }

    th
    {
        font-weight: 600;
        color: var(--c_text-muted);
    }

    //
    // Array
    //

    .array
    {
        display: flex;
        flex-wrap: wrap;
        gap: size.$gapBig;

        align-items: center;
        justify-content: center;
    }

    //
    // Inline text style
    //

    strong
    {
        font-weight: 600;
    }

    //
    // Link
    //

    p a
    {
        color: #3766a9;
        text-decoration: none;
        border-bottom: 1px solid #bed0ea;

        background: transparent;
        @include util.transition(background);

        &[data-preview]
        {
            border-bottom-style: dashed;
        }

        &:hover
        {
            background: rgba(#1a73e8, .1);
        }

        @include color.themeDark
        {
            color: #97b0d3;
            border-bottom-color: #3d4a5d;
        }
    }

    //
    // Gallery
    //

    .gallery
    {
        display: flex;
        flex-direction: column;
        gap: size.$gap;

        //border: 1px solid var(--c_border);
        border-left: none;
        border-right: none;

        > .selector
        {
            border-top: 1px dashed var(--c_border);
            border-bottom: 1px dashed var(--c_border);
            overflow: auto;

            @extend %scrollbar;
            transform: rotateX(180deg);

            display: flex;

            > .inner
            {
                transform: rotateX(180deg);

                display: flex;
                gap: size.$gap;

                padding: size.$gap;
                margin: auto;

                > .image
                {
                    $previewSize: 75px;

                    flex-shrink: 0;

                    @include util.size($previewSize);
                    position: relative;

                    border: 1px solid var(--c_border);
                    border-radius: size.$borderRadius;

                    &[data-current]
                    {
                        &::after { opacity: 1; }
                    }

                    &::after
                    {
                        position: absolute;
                        content: "";
                        width: $previewSize;
                        height: 3px;
                        background: var(--c_text-muted);
                        bottom: calc(-1 * size.$gap);
                        opacity: 0;

                        @include util.transition(opacity);
                    }

                    > .hoverOverlay
                    {
                        position: absolute;
                        z-index: 2;
                        @include util.size(100%);
                        background: rgba(0,0,0,.4);
                        border-radius: size.$borderRadius;

                        cursor: pointer;

                        opacity: 0;
                        @include util.transition(opacity);

                        &:hover { opacity: 1; }

                        > i
                        {
                            position: absolute;
                            left: 50%;
                            top: 50%;
                            transform: translate(-50%, -50%);
                            color: white;
                            font-size: 25px;
                        }
                    }

                    > .imgWrapper
                    {
                        overflow: hidden;
                        position: absolute;
                        @include util.size(100%);
                        border-radius: size.$borderRadius;

                        > img
                        {
                            position: absolute;
                            z-index: 1;
                            top: 0;
                            left: calc($previewSize / 2);
    
                            transform: translateX(-50%);
    
                            display: block;
                            height: $previewSize;
                        }
                    }
                }
            }
        }

        > .display
        {
            > .displayImage
            {
                &:not([data-current])
                {
                    height: 0;
                    overflow: hidden;
                }
            }
        }
    }

    //
    // Image
    //

    img[data-invertible]
    {
        @include color.themeDark
        {
            filter: hue-rotate(180deg) invert(100%);
        }
    }

    @at-root
    {
        body > .pswp img[data-invertible]
        {
            filter: hue-rotate(180deg) invert(100%);
        }
    }

    .image
    {
        display: flex;
        flex-direction: column;
        gap: size.$gap;

        margin-left: auto;
        margin-right: auto;

        @include bp.min('mini', 1)
        {
            @for $i from 1 through 9
            {
                &.w#{$i}  {  width: 10% * $i; }
            }
        }

        @include bp.max('mini')
        {
            @for $i from 1 through 9
            {
                &.mini-w#{$i} { width: 10% * $i; }
            }
        }

        > a
        {
            > img
            {
                display: block;
                max-width: 100%;
                height: auto;
                margin: auto;
                
                padding: size.$gap 0;
        
                //border: 1px solid var(--c_border);
                border-radius: size.$borderRadius;
                //background: var(--c_bg-content-shade);
            }
        }

        > .caption
        {
            color: var(--c_text-muted);
            font-size: 93%;
            text-align: center;
        }
    }

    //
    // Task
    //

    .task
    {
        border: 1px solid var(--c_border);
        border-left: none;
        border-right: none;

        padding-bottom: size.$gap;

        // & + .task { border-top: none; }

        > header
        {
            display: flex;
            align-items: center;
            gap: size.$gap;

            border-bottom: 1px solid var(--c_border);
            padding: size.$gap 0;

            > .info
            {
                flex: 1;
                display: flex;
                flex-direction: column;
                justify-content: center;

                > .title
                {
                    font-weight: bold;
                }

                > .desc
                {
                    font-size: .9em;
                    color: var(--c_text-muted);
                }
            }

            > .controls
            {
                display: flex;
                gap: size.$gap;

                > button
                {
                    @include util.flexCC;
                    @include util.size(40px);

                    font-size: 17px;
                    color: var(--c_text-muted);
                    background: var(--c_bg);
                    border: 2px solid transparent;
                    border-radius: size.$borderRadius;
                    cursor: pointer;

                    @include util.transition(color, background, border-color);

                    &:hover
                    {
                        color: var(--c_text);
                        border-color: var(--c_text-disabled);
                    }
                }
            }

            @include bp.max(mini)
            {
                flex-direction: column;

                > .info
                {
                    text-align: center;
                }
            }
        }

        > .statement
        {
            padding-top: size.$gap;
        }

        > section
        {
            overflow: hidden;
        }

        > section > .inner
        {
            > header
            {
                display: flex;
                align-items: center;
                gap: size.$gapSmall;

                color: var(--c_text-muted);
                font-weight: bold;

                padding: size.$gap 0;

                > i
                {
                    font-size: 18px;
                    width: 18px;
                    text-align: center;
                }
            }
        }

        > .statement,
        > section > .inner > .content
        {
            > *:not(:last-child) { margin-bottom: size.$gapBig; }
        }

        $sections: (hint: '\e926', solution: '\e910', answer: '\e925');

        @each $sectionName, $sectionIcon in $sections
        {
            > header > .controls > button[data-section=#{$sectionName}] > i::before,
            > section[data-name=#{$sectionName}] > .inner > header > i::before
            {
                font-family: "Erudit-Icons";
                font-style: normal;
                content: $sectionIcon;
            }

            &[data-#{$sectionName}-open]
            {
                > header > .controls > button[data-section=#{$sectionName}]
                {
                    border-color: var(--c_text-dimmed);
                }
            }

            &:not([data-#{$sectionName}-open])
            {
                > section[data-name=#{$sectionName}]
                {
                    height: 0;
                    position: relative;
                    overflow: hidden;
                }
            } 
        }
    }

    //
    // Accent Block
    //

    .accentBlock
    {
        $sideSize: 30px;
        display: flex;

        &:not([data-expand-open])
        {
            > .content > .expand
            {
                height: 0;
                padding-top: 0;
                overflow: hidden;
            }
        }

        &[data-expand-open]
        {
            > .side > .expand > i
            {
                transform: rotate(0);
            }
        }

        > .side
        {
            display: flex;
            flex-direction: column;

            > .type
            {
                @include util.flexCC;
                @include util.size($sideSize);

                cursor: help;

                font-size: 18px;
                color: white;
                background: var(--_ab-color);

                > i::before
                {
                    font-family: "Erudit-Icons";
                    font-style: normal;
                    position: relative;
                    top: 1px;
                    content: var(--_ab-icon);
                }
            }

            > .expand
            {
                position: relative;

                @include util.flexCC;
                @include util.size($sideSize);

                cursor: pointer;

                font-size: 18px;
                color: var(--_ab-color);

                border: 2px solid var(--_ab-color);

                &:hover
                {
                    > .bgOverlay
                    {
                        opacity: .15;
                    }
                }

                > .bgOverlay
                {
                    position: absolute;
                    left: 0; top: 0;
                    @include util.size(100%);

                    background: var(--_ab-color);
                    opacity: 0;

                    @include util.transition(opacity);
                }

                > i
                {
                    transform: rotate(180deg);
                    @include util.transition(transform);
                }
            }
        }

        > .content
        {
            position: relative;
            left: -2px;
            flex: 1;

            display: flex;
            flex-direction: column;

            overflow: hidden;

            > .primaryWrapper,
            > .expand
            {
                padding-left: size.$gap;
                border-left: 2px solid var(--_ab-color);
            }

            > .primaryWrapper
            {
                flex: 1;
                display: flex;
                flex-direction: column;
                justify-content: center;

                > .title
                {
                    font-weight: bold;
                    color: var(--_ab-color);
                    margin-bottom: calc(size.$gapSmall - 5px);
                }

                > .main
                {
                    strong
                    {
                        font-weight: bold;
                        color: var(--_ab-color);
                    }

                    > *:not(:last-child) { margin-bottom: size.$gap; }
                }
            }

            > .expand
            {
                border-left-style: dashed;
                padding-top: size.$gap;

                display: flex;
                flex-direction: column;
                gap: size.$gap;

                > section
                {
                    > .title
                    {
                        font-weight: 600;
                        color: var(--_ab-color);
                        margin-bottom: calc(size.$gapSmall - 5px);
                    }

                    > .content
                    {
                        > *:not(:last-child) { margin-bottom: size.$gap; }
                    }
                }
            }
        }

        @include bp.max(mini)
        {
            flex-direction: column;

            > .side
            {
                flex-direction: row;
            }

            > .content
            {
                left: 0;

                > .primaryWrapper
                {
                    padding-top: size.$gapSmall;
                }
            }
        }

        @each $type in ab.getTypes()
        {
            &[data-type=#{$type}]
            {
                --_ab-color: var(--c_ab-#{$type});
                --_ab-icon: #{ab.getIconCode($type)};
            }
        }

        &[data-type=important] > .side > .type  { font-size: 23px; }
    }

    //
    // Math
    //

    .mathInline
    {
        color: var(--c_text-math);
    }

    .katex-display
    {
        margin: 0;
        .base { margin: calc(size.$gap/2.2) 0; }

        overflow: hidden;
        overflow-x: auto;

        &::-webkit-scrollbar
        {
            height: 5px;
        }

        &::-webkit-scrollbar-track
        {
            background: var(--color-bg);
        }

        &::-webkit-scrollbar-thumb
        {
            background: var(--color-border-light);

            &:hover
            {
                background: var(--color-brand);
            }
        }
    }

    .katex > .katex-html
    {
        white-space: normal;
    }

    .mathInline .katex
    {
        font-size: 1.15em !important;
    }
}