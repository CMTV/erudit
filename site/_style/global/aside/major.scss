@use 'def/size';

@use 'partial/hover';
@use 'partial/util';

body > aside.major
{
    > .full
    {
        //
        // Site Info
        //

        > .siteInfo
        {
            display: grid;
            grid-template-columns: 50px auto;
            grid-template-rows: auto auto;
            column-gap: size.$gap;
            user-select: none;

            padding: size.$gap;

            border-bottom: 1px solid var(--c_border);

            > .logo
            {
                grid-row: 1 / 3;
                align-self: center;

                @include util.size(50px);

                svg
                {
                    @keyframes logoCircleRotation
                    {
                        from { transform: rotateZ(0); }
                        to { transform: rotateZ(360deg); }    
                    }

                    > circle
                    {
                        transform-origin: 50% 50%;
                        animation: logoCircleRotation 2.5s infinite linear;
                    }

                    > path { fill: var(--c_bg-content-shade); }
                }
            }

            > .title
            {
                font-weight: bold;
                font-size: 20px;

                > a { @extend %underline; }
            }

            > .slogan
            {
                color: var(--c_text-muted);
            }
        }

        //
        // Pane Switcher
        //

        > .paneSwitcher
        {
            $buttonSize: 40px;
            $buttonGap: size.$gap;
            $sliderHeight: 3px;
            
            //

            border-bottom: 1px solid var(--c_border);

            > .inner
            {
                position: relative;
                width: calc(5 * ($buttonSize + $buttonGap));
                margin: 0 auto;

                > button
                {
                    position: relative;
                    padding: calc($buttonGap / 2);
                    background: transparent;

                    color: var(--c_text-muted);
                    @include hover.color(var(--c_text), true);

                    &[data-current] { color: var(--c_text); }

                    &::after
                    {
                        content: "";
                        position: absolute;
                        left: calc($buttonGap / 2); bottom: -1px; right: calc($buttonGap / 2);
                        height: 3px;
                        background: var(--c_border);
                        opacity: 0;
    
                        @include util.transition(opacity);
                    }

                    &:hover::after { opacity: 1; }

                    > .inner
                    {
                        @include util.flexCC;
                        @include util.size($buttonSize);
                        font-size: 22px;
                    }
                }

                > .slider
                {
                    position: absolute;
                    bottom: -1px;
                    z-index: 5;
                    background: var(--c_text-muted);
                    @include util.size($buttonSize, $sliderHeight);
                    @include util.transition(left);
                }

                @for $i from 1 through 5
                {
                    > button:nth-of-type(#{$i})[data-current] ~ .slider
                    {
                        left: calc((($i - 1) * ($buttonSize + $buttonGap)) + ($buttonGap / 2));
                    }
                }
            }
        }

        //
        // Panes
        //

        > .panes
        {
            position: relative;

            > .pane
            {
                position: absolute;
                left: 0;
                top: 0;
                width: size.$aside;
                opacity: 1;
                @include util.transition(left, opacity);

                &:not([data-current]) { opacity: 0; left: -1 * size.$aside; }
                &[data-current] ~ .pane { left: size.$aside; }
            }
        }
    }

    > .mini
    {
        display: flex;
        flex-direction: column;

        > *
        {
            @include util.flexCC;
            @include util.size(size.$asideMini);
            font-size: 25px;
            color: var(--c_text-dimmed);
            background: transparent;
            border-bottom: 1px solid var(--c_border);

            @include util.transition(background, color);

            &:hover
            {
                cursor: pointer;
                color: var(--c_text);
                background: var(--c_bg-content-accent);
            }
        }
    }
}